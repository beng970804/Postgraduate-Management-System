/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package jets;

import java.awt.Component;
import java.sql.*;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.*;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author alfre
 */
public class AdminExamination extends javax.swing.JFrame {

    LinkedList<String> studentIDList = new LinkedList<>();
    LinkedList<String> trimesterIDList = new LinkedList<>();
    LinkedList<ExamSlip> slipList = new LinkedList<>();
    LinkedList<ExamResult> resultList = new LinkedList<>();
    LinkedList<ExamResult> myResult = new LinkedList<>();
    LinkedList<String> resultTri = new LinkedList<>();
    String url = "jdbc:db2:PMS";
    
    /**
     * Creates new form AdminExamination
     */
    public AdminExamination() {
        initComponents();
        getFromDatabase();
        refreshExamResult();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        MenuPanel = new javax.swing.JPanel();
        HomeLabel = new javax.swing.JLabel();
        HomeIconLabel = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        GERPanel = new javax.swing.JPanel();
        GERLabel = new javax.swing.JLabel();
        ViewNotificationIconLabel = new javax.swing.JLabel();
        GESPanel = new javax.swing.JPanel();
        GESLabel = new javax.swing.JLabel();
        GenerateNotificationIconLabel = new javax.swing.JLabel();
        EPanel = new javax.swing.JPanel();
        ELabel = new javax.swing.JLabel();
        NotificationIconLabel = new javax.swing.JLabel();
        ContentPanel = new javax.swing.JPanel();
        ContentGES = new javax.swing.JPanel();
        CGESLabel = new javax.swing.JLabel();
        TimeComboBox = new javax.swing.JComboBox<>();
        ExamTimeLabel = new javax.swing.JLabel();
        SubjectLabel = new javax.swing.JLabel();
        ExamDateLabel = new javax.swing.JLabel();
        ExamDate = new javax.swing.JTextField();
        SaveButton = new javax.swing.JButton();
        SubjectComboBox = new javax.swing.JComboBox<>();
        ContentGER = new javax.swing.JPanel();
        CGERLabel = new javax.swing.JLabel();
        SelectTri = new javax.swing.JLabel();
        GPAComboBox = new javax.swing.JComboBox<>();
        SubjectNameText = new javax.swing.JTextField();
        StudentIDLabel = new javax.swing.JLabel();
        SubjectIDLabel = new javax.swing.JLabel();
        ERSave = new javax.swing.JButton();
        StudentNameText = new javax.swing.JTextField();
        GradeLabel = new javax.swing.JLabel();
        GPALabel = new javax.swing.JLabel();
        CreditHourLabel = new javax.swing.JLabel();
        CHText = new javax.swing.JTextField();
        TrimesterComboBox = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        GradeComboBox = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        StudentIDText = new javax.swing.JTextField();
        SubjectIDText = new javax.swing.JTextField();
        ContentMainPanel = new javax.swing.JPanel();
        ELabel2 = new javax.swing.JLabel();
        GERLabel2 = new javax.swing.JLabel();
        GESLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Admin- Examination");
        setSize(new java.awt.Dimension(1280, 720));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        MenuPanel.setBackground(new java.awt.Color(50, 100, 255));
        MenuPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        HomeLabel.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        HomeLabel.setForeground(new java.awt.Color(255, 255, 255));
        HomeLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        HomeLabel.setText("Home");
        MenuPanel.add(HomeLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 0, 270, 40));

        HomeIconLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        HomeIconLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/icons8_Back_Arrow_32px_3.png"))); // NOI18N
        HomeIconLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                HomeIconLabelMousePressed(evt);
            }
        });
        MenuPanel.add(HomeIconLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 70, 40));

        jSeparator1.setBackground(new java.awt.Color(255, 255, 255));
        jSeparator1.setForeground(new java.awt.Color(0, 0, 0));
        jSeparator1.setPreferredSize(new java.awt.Dimension(1, 1));
        MenuPanel.add(jSeparator1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 40, 340, 10));

        GERPanel.setBackground(new java.awt.Color(60, 100, 255));
        GERPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        GERLabel.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        GERLabel.setForeground(new java.awt.Color(255, 255, 255));
        GERLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        GERLabel.setText("Generate Exam Result");
        GERLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                GERLabelMousePressed(evt);
            }
        });
        GERPanel.add(GERLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 0, 270, 50));

        ViewNotificationIconLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        ViewNotificationIconLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/icons8_Add_File_24px.png"))); // NOI18N
        GERPanel.add(ViewNotificationIconLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 70, 50));

        MenuPanel.add(GERPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 150, 340, 50));

        GESPanel.setBackground(new java.awt.Color(60, 100, 255));
        GESPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        GESLabel.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        GESLabel.setForeground(new java.awt.Color(255, 255, 255));
        GESLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        GESLabel.setText("Generate Exam Slip");
        GESLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                GESLabelMousePressed(evt);
            }
        });
        GESPanel.add(GESLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 0, 270, 50));

        GenerateNotificationIconLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        GenerateNotificationIconLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/icons8_Add_File_24px.png"))); // NOI18N
        GESPanel.add(GenerateNotificationIconLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 70, 50));

        MenuPanel.add(GESPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 100, 340, 50));

        EPanel.setBackground(new java.awt.Color(60, 100, 255));
        EPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        ELabel.setFont(new java.awt.Font("Segoe UI", 1, 22)); // NOI18N
        ELabel.setForeground(new java.awt.Color(255, 255, 255));
        ELabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        ELabel.setText("Examination");
        ELabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                ELabelMousePressed(evt);
            }
        });
        EPanel.add(ELabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 0, 270, 50));

        NotificationIconLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        NotificationIconLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/icons8_Exam_30px.png"))); // NOI18N
        EPanel.add(NotificationIconLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 70, 50));

        MenuPanel.add(EPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 50, 340, 50));

        getContentPane().add(MenuPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 340, 720));

        ContentPanel.setLayout(new java.awt.CardLayout());

        ContentGES.setBackground(new java.awt.Color(255, 255, 255));
        ContentGES.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        CGESLabel.setFont(new java.awt.Font("Segoe UI", 1, 28)); // NOI18N
        CGESLabel.setForeground(new java.awt.Color(0, 0, 0));
        CGESLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        CGESLabel.setText("Generate Exam Slip");
        ContentGES.add(CGESLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 30, 880, 40));

        TimeComboBox.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        TimeComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "09:00", "14:00" }));
        ContentGES.add(TimeComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 240, 150, 30));

        ExamTimeLabel.setFont(new java.awt.Font("Segoe UI", 1, 16)); // NOI18N
        ExamTimeLabel.setForeground(new java.awt.Color(0, 0, 0));
        ExamTimeLabel.setText("Examination Time             : ");
        ContentGES.add(ExamTimeLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 240, 200, 30));

        SubjectLabel.setFont(new java.awt.Font("Segoe UI", 1, 16)); // NOI18N
        SubjectLabel.setForeground(new java.awt.Color(0, 0, 0));
        SubjectLabel.setText("Subject                                  :");
        ContentGES.add(SubjectLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 100, 200, 30));

        ExamDateLabel.setFont(new java.awt.Font("Segoe UI", 1, 16)); // NOI18N
        ExamDateLabel.setForeground(new java.awt.Color(0, 0, 0));
        ExamDateLabel.setText("Examination Date              :");
        ContentGES.add(ExamDateLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 170, 200, 30));

        ExamDate.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        ExamDate.setText("Eg. 2017-08-20 (YYYY-MM-DD Format only)");
        ExamDate.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                ExamDateFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                ExamDateFocusLost(evt);
            }
        });
        ContentGES.add(ExamDate, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 170, 300, 30));

        SaveButton.setText("Save");
        SaveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveButtonActionPerformed(evt);
            }
        });
        ContentGES.add(SaveButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 420, 100, 30));

        SubjectComboBox.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        ContentGES.add(SubjectComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 100, 150, 30));

        ContentPanel.add(ContentGES, "card3");

        ContentGER.setBackground(new java.awt.Color(255, 255, 255));
        ContentGER.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        CGERLabel.setFont(new java.awt.Font("Segoe UI", 1, 28)); // NOI18N
        CGERLabel.setForeground(new java.awt.Color(0, 0, 0));
        CGERLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        CGERLabel.setText("Generate Exam Result");
        ContentGER.add(CGERLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 30, 880, 40));

        SelectTri.setFont(new java.awt.Font("Segoe UI", 1, 16)); // NOI18N
        SelectTri.setForeground(new java.awt.Color(0, 0, 0));
        SelectTri.setText("Select Trimester                 :");
        ContentGER.add(SelectTri, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 100, 200, 30));

        GPAComboBox.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        ContentGER.add(GPAComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 300, 150, 30));

        SubjectNameText.setEditable(false);
        SubjectNameText.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        ContentGER.add(SubjectNameText, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 200, 300, 30));

        StudentIDLabel.setFont(new java.awt.Font("Segoe UI", 1, 16)); // NOI18N
        StudentIDLabel.setForeground(new java.awt.Color(0, 0, 0));
        StudentIDLabel.setText("Student ID & Name          :");
        ContentGER.add(StudentIDLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 150, 200, 30));

        SubjectIDLabel.setFont(new java.awt.Font("Segoe UI", 1, 16)); // NOI18N
        SubjectIDLabel.setForeground(new java.awt.Color(0, 0, 0));
        SubjectIDLabel.setText("Subject ID & Name           : ");
        ContentGER.add(SubjectIDLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 200, 200, 30));

        ERSave.setText("Save");
        ERSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ERSaveActionPerformed(evt);
            }
        });
        ContentGER.add(ERSave, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 420, 100, 30));

        StudentNameText.setEditable(false);
        StudentNameText.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        ContentGER.add(StudentNameText, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 150, 300, 30));

        GradeLabel.setFont(new java.awt.Font("Segoe UI", 1, 16)); // NOI18N
        GradeLabel.setForeground(new java.awt.Color(0, 0, 0));
        GradeLabel.setText("Grade                                    :");
        ContentGER.add(GradeLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 250, 200, 30));

        GPALabel.setFont(new java.awt.Font("Segoe UI", 1, 16)); // NOI18N
        GPALabel.setForeground(new java.awt.Color(0, 0, 0));
        GPALabel.setText("GPA                                       :");
        ContentGER.add(GPALabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 300, 200, 30));

        CreditHourLabel.setFont(new java.awt.Font("Segoe UI", 1, 16)); // NOI18N
        CreditHourLabel.setForeground(new java.awt.Color(0, 0, 0));
        CreditHourLabel.setText("Credit Hour                         :");
        ContentGER.add(CreditHourLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 350, 200, 30));

        CHText.setEditable(false);
        CHText.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        ContentGER.add(CHText, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 350, 300, 30));

        TrimesterComboBox.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        TrimesterComboBox.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                TrimesterComboBoxFocusLost(evt);
            }
        });
        ContentGER.add(TrimesterComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 100, 150, 30));

        jLabel1.setForeground(new java.awt.Color(255, 0, 0));
        jLabel1.setText("A: 4.00, 3.67     B: 3.33, 3.00     C: 2.67, 2.33    D: 2.00    F: 0.00  ");
        ContentGER.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 330, 500, -1));

        GradeComboBox.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        GradeComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "A", "B", "C", "D", "F" }));
        GradeComboBox.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                GradeComboBoxFocusLost(evt);
            }
        });
        ContentGER.add(GradeComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 250, 150, 30));

        jLabel2.setForeground(new java.awt.Color(255, 0, 0));
        jLabel2.setText("(Determine Student and Subject)");
        ContentGER.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 130, 220, -1));

        StudentIDText.setEditable(false);
        StudentIDText.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        ContentGER.add(StudentIDText, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 150, 300, 30));

        SubjectIDText.setEditable(false);
        SubjectIDText.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        ContentGER.add(SubjectIDText, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 200, 300, 30));

        ContentPanel.add(ContentGER, "card4");

        ContentMainPanel.setBackground(new java.awt.Color(255, 255, 255));
        ContentMainPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        ELabel2.setFont(new java.awt.Font("Segoe UI", 1, 28)); // NOI18N
        ELabel2.setForeground(new java.awt.Color(0, 0, 0));
        ELabel2.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        ELabel2.setText("Examination");
        ContentMainPanel.add(ELabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 30, 880, 40));

        GERLabel2.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        GERLabel2.setForeground(new java.awt.Color(0, 0, 0));
        GERLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        GERLabel2.setText("Generate Exam Result");
        GERLabel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        GERLabel2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                GERLabel2MousePressed(evt);
            }
        });
        ContentMainPanel.add(GERLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 100, 250, 60));

        GESLabel2.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        GESLabel2.setForeground(new java.awt.Color(0, 0, 0));
        GESLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        GESLabel2.setText("Generate Exam Slip");
        GESLabel2.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true));
        GESLabel2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                GESLabel2MousePressed(evt);
            }
        });
        ContentMainPanel.add(GESLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 100, 250, 60));

        ContentPanel.add(ContentMainPanel, "card4");

        getContentPane().add(ContentPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 0, 940, 720));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void HomeIconLabelMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_HomeIconLabelMousePressed
        // TODO add your handling code here:
        if (Jets.UserType.equals("STUDENT"))
            new StudentMainMenu().setVisible(true);
        if (Jets.UserType.equals("ADMIN"))
            new AdminMainMenu().setVisible(true);
        if (Jets.UserType.equals("LECTURER"))
            new LecturerMainMenu().setVisible(true);
        dispose();
    }//GEN-LAST:event_HomeIconLabelMousePressed

    private void GERLabelMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_GERLabelMousePressed
        // TODO add your handling code here:
        ContentMainPanel.setVisible(false);
        ContentGES.setVisible(false);
        ContentGER.setVisible(true);
        //retrieveNotification();
    }//GEN-LAST:event_GERLabelMousePressed

    private void GESLabelMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_GESLabelMousePressed
        // TODO add your handling code here:
        ContentGES.setVisible(true);
        ContentMainPanel.setVisible(false);
        ContentGER.setVisible(false);
    }//GEN-LAST:event_GESLabelMousePressed

    private void ELabelMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ELabelMousePressed
        // TODO add your handling code here:
        ContentMainPanel.setVisible(true);
        ContentGES.setVisible(false);
        ContentGER.setVisible(false);
    }//GEN-LAST:event_ELabelMousePressed

    private void ExamDateFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_ExamDateFocusGained
        // TODO add your handling code here:
        if (ExamDate.getText().equals("Eg. 2017-08-20 (YYYY-MM-DD Format only)"))
        {
            ExamDate.setForeground(new java.awt.Color(0,0,0));
            ExamDate.setText("");
        }
    }//GEN-LAST:event_ExamDateFocusGained

    private void ExamDateFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_ExamDateFocusLost
        // TODO add your handling code here:
        if (ExamDate.getText().equals(""))
        {
            ExamDate.setForeground(new java.awt.Color(0,0,0));
            ExamDate.setText("Eg. 2017-08-20 (YYYY-MM-DD Format only)");
        }
    }//GEN-LAST:event_ExamDateFocusLost

    private void SaveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveButtonActionPerformed
        // TODO add your handling code here:
        trimesterIDList.clear();
        String id;
        String time;
        String date;
        int[] seat;
        String subject;
        int count=0;

        Connection con;

        try{
            Class.forName("com.ibm.db2.jcc.DB2Driver");
            con = DriverManager.getConnection(url);
            
            subject = SubjectComboBox.getItemAt(SubjectComboBox.getSelectedIndex());
            Statement sql1;
            ResultSet rs1;
            String s1 = "select count(subject_id) from trimester where subject_id = '" + subject + "'";
            sql1 = con.createStatement();
            rs1 = sql1.executeQuery(s1);
            while(rs1.next()){
                count = Integer.parseInt(rs1.getString(1));
            }
            rs1.close();
            sql1.close();

            time = TimeComboBox.getItemAt(TimeComboBox.getSelectedIndex());
            date = ExamDate.getText();
            boolean checkDate = checkDate(date);
            seat = new int[count];
            for (int i=0;i<count;i++){
                seat[i] = i+1;
            }
            
            String tid;
            Statement sql4;
            ResultSet rs4;
            String s4 = "select trimester_id from trimester where subject_id = '" + subject + "'";
            sql4 = con.createStatement();
            rs4 = sql4.executeQuery(s4);
            while (rs4.next()){
                tid = rs4.getString(1);
                trimesterIDList.add(tid);
            }
            rs4.close();
            sql4.close();

            Statement sql2;
            if (checkDate){
                int i=0;
                if (count == 0){
                    JOptionPane.showMessageDialog(null, "No student enrolled for this subject. Add to exam slip failed");
                }
                else{
                    boolean check;
                    if(slipList.isEmpty()){
                        check = true;
                    }
                    else {
                        check = checkTriID(trimesterIDList);
                    }
                    if (check){
                        while (i<count){
                            String newID;
                            if (slipList.isEmpty()){
                                newID = "TIM-000001";
                            }
                            else{
                                newID = generateTimetableID(slipList.get(slipList.size()-1).getID());
                            }
                            sql2 = con.createStatement();
                            String s2 = "insert into timetable values ('" +
                            newID + "', '" +
                            date + "', '" +
                            time + "', " +
                            seat[i] + ", '" +
                            trimesterIDList.get(i) + "')";
                            sql2.executeUpdate(s2);
                            sql2.close();
                            slipList.add(new ExamSlip(newID, date, time, seat[i], trimesterIDList.get(i)));
                            i++;
                        }
                        JOptionPane.showMessageDialog(null, "Subject added to slip successfully");
                    }
                    else{
                        JOptionPane.showMessageDialog(null, "This subject is already in exam slip");
                    }
                }
            }
            else{
                JOptionPane.showMessageDialog(new JFrame(), "The date should be in YYYY-MM-DD format. Ensure the value is correct");
                ExamDate.setText("Eg. 2017-08-20 (YYYY-MM-DD Format only)");
            }

            con.close();
        }
        catch (ClassNotFoundException | SQLException e) {
            System.out.println(e);
        }
    }//GEN-LAST:event_SaveButtonActionPerformed

    private void GERLabel2MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_GERLabel2MousePressed
        // TODO add your handling code here:
        ContentMainPanel.setVisible(false);
        ContentGES.setVisible(false);
        ContentGER.setVisible(true);
        //retrieveNotification();
    }//GEN-LAST:event_GERLabel2MousePressed

    private void GESLabel2MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_GESLabel2MousePressed
        // TODO add your handling code here:
        ContentGES.setVisible(true);
        ContentMainPanel.setVisible(false);
        ContentGER.setVisible(false);
    }//GEN-LAST:event_GESLabel2MousePressed

    private void ERSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ERSaveActionPerformed
        // TODO add your handling code here:
        String ID;
        String grade;
        double cgpa;
        double gpa;
        int totalCreditHour;
        String triID;

        Connection con;

        try{
            Class.forName("com.ibm.db2.jcc.DB2Driver");
            con = DriverManager.getConnection(url);
            
            if (resultList.isEmpty()){
                ID = "EXM-000001";
            }
            else{
                ID = generateResultID(resultList.get(resultList.size()-1).getID());
            }
            
            grade = GradeComboBox.getItemAt(GradeComboBox.getSelectedIndex());
            gpa = Double.parseDouble(GPAComboBox.getItemAt(GPAComboBox.getSelectedIndex()));
            cgpa = gpa;
            totalCreditHour = Integer.parseInt(CHText.getText());
            triID = TrimesterComboBox.getItemAt(TrimesterComboBox.getSelectedIndex());
            boolean triCheck = checkTri(triID);
            
            if(triCheck){
                Statement sql1;
                sql1 = con.createStatement();
                String s1 = "insert into exam_result values ('" +
                        ID + "', '" +
                        grade + "', " +
                        cgpa + ", " +
                        gpa + ", " +
                        totalCreditHour + ", '" + 
                        triID + "')";
                sql1.executeUpdate(s1);
                sql1.close();
                resultList.add(new ExamResult(ID, grade, cgpa, gpa, totalCreditHour, triID));
                refreshExamResult();
                JOptionPane.showMessageDialog(null, "Exam result added successfully");
                StudentIDText.setText("");
                StudentNameText.setText("");
                SubjectIDText.setText("");
                SubjectNameText.setText("");
                CHText.setText("");
            }
            else{
                JOptionPane.showMessageDialog(null, "An exam result had been generated for this trimester ID. Please choose another trimester ID");
                StudentIDText.setText("");
                StudentNameText.setText("");
                SubjectIDText.setText("");
                SubjectNameText.setText("");
                CHText.setText("");
            }
            
            con.close();
        }
        catch (ClassNotFoundException | SQLException e) {
            System.out.println(e);
        }
        
    }//GEN-LAST:event_ERSaveActionPerformed

    private void TrimesterComboBoxFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_TrimesterComboBoxFocusLost
        // TODO add your handling code here:
        String triID = TrimesterComboBox.getItemAt(TrimesterComboBox.getSelectedIndex());
        String studID="";
        String subID="";
        Connection con;
        
        try{
            Class.forName("com.ibm.db2.jcc.DB2Driver");
            con = DriverManager.getConnection(url);
            
            Statement sql1;
            ResultSet rs1;
            String s1 = "select * from trimester where trimester_id = '"
                    + triID
                    + "'";
            sql1 = con.createStatement();
            rs1 = sql1.executeQuery(s1);
            while(rs1.next()){
                studID = rs1.getString("student_id");
                subID = rs1.getString("subject_id");
            }
            rs1.close();
            sql1.close();
            
            StudentIDText.setText(studID);
            SubjectIDText.setText(subID);
            
            int creditHour = 0;
            String subName = "";
            Statement sql2;
            ResultSet rs2;
            String s2 = "select subject_name, credit_hour from subject where subject_id = '"
                    + subID
                    + "'";
            sql2 = con.createStatement();
            rs2 = sql2.executeQuery(s2);
            while(rs2.next()){
                subName = rs2.getString("subject_name");
                creditHour = Integer.parseInt(rs2.getString("credit_hour"));
            }
            rs2.close();
            sql2.close();
            
            SubjectNameText.setText(subName);
            CHText.setText(Integer.toString(creditHour));
            
            String stuName = "";
            Statement sql3;
            ResultSet rs3;
            String s3 = "select student_name from student where student_id = '"
                    + studID
                    + "'";
            sql3 = con.createStatement();
            rs3 = sql3.executeQuery(s3);
            while(rs3.next()){
                stuName = rs3.getString("student_name");
            }
            rs3.close();
            sql3.close();
            
            StudentNameText.setText(stuName);
            
            con.close();
        }
        catch (ClassNotFoundException | SQLException e) {
            System.out.println(e);
        }              
    }//GEN-LAST:event_TrimesterComboBoxFocusLost

    private void GradeComboBoxFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_GradeComboBoxFocusLost
        // TODO add your handling code here:
        String grade = GradeComboBox.getItemAt(GradeComboBox.getSelectedIndex());
        if (grade.equals("A")){
            GPAComboBox.removeAllItems();
            GPAComboBox.addItem("4.00");
            GPAComboBox.addItem("3.67");
        }
        if (grade.equals("B")){
            GPAComboBox.removeAllItems();
            GPAComboBox.addItem("3.33");
            GPAComboBox.addItem("3.00");
        }
        if (grade.equals("C")){
            GPAComboBox.removeAllItems();
            GPAComboBox.addItem("2.67");
            GPAComboBox.addItem("2.33");
        }
        if (grade.equals("D")){
            GPAComboBox.removeAllItems();
            GPAComboBox.addItem("2.00");
        }
        if (grade.equals("F")){
            GPAComboBox.removeAllItems();
            GPAComboBox.addItem("0.00");
        }
    }//GEN-LAST:event_GradeComboBoxFocusLost

    public boolean checkDate(String date){
        date = date.toLowerCase();
        if (date.contains("a")||date.contains("b")||date.contains("c")||date.contains("d")||date.contains("e")||date.contains("f")
                ||date.contains("g")||date.contains("h")||date.contains("i")||date.contains("j")||date.contains("k")||date.contains("l")
                ||date.contains("m")||date.contains("n")||date.contains("o")||date.contains("p")||date.contains("q")||date.contains("r")
                ||date.contains("s")||date.contains("t")||date.contains("u")||date.contains("v")||date.contains("w")||date.contains("x")
                ||date.contains("y")||date.contains("z")||date.contains(".")||date.contains("/")){
            return false;
        }
        if((date.length()>10)||(date.length()<10)){
            return false;
        }
        DateTimeFormatter dtf = DateTimeFormatter.ofPattern("yyyy-MM-dd");
        LocalDate localDate = LocalDate.now();
        String d1 = localDate.format(dtf);
        String[] dt = d1.split("-");
        String y = dt[0];
        String m = dt[1];
        String d = dt[2];
        String[] splited = date.split("-");
        String splitYear = splited[0];
        String splitMonth = splited[1];
        String splitDay = splited[2];
        int currentY = Integer.parseInt(y);
        int currentM = Integer.parseInt(m);
        int currentD = Integer.parseInt(d);
        int targetY = Integer.parseInt(splitYear);
        int targetM = Integer.parseInt(splitMonth);
        int targetD = Integer.parseInt(splitDay);
        if (currentY>targetY){
            return false;
        }
        if ((currentY<=targetY)&&(currentM>targetM)){
            return false;
        }
        if ((currentY<=targetY)&&(currentM<=targetM)&&(currentD>targetD)){
            return false;
        }
        String datePattern = "\\d{4}-\\d{2}-\\d{2}";
        return ((date.matches(datePattern))&&(checkMonthAndDay(Integer.parseInt(splitYear),Integer.parseInt(splitMonth),Integer.parseInt(splitDay))));
    }
    
    public boolean checkMonthAndDay(int year, int month, int day){
        int month31[] = {1,3,5,7,8,10,12};
        int month30[] = {4,6,9,11};
        int month28[] = {2};
        double yr = (double)year;
        boolean checked = true;
        if (contains(month31, month)){
            if (day>31){
                checked = false;
            }
        }
        if (contains(month30, month)){
            if (day>30){
                checked = false;
            }
        }
        if (contains(month28, month)){
            if (yr%4 == 0){
                if (day>29){
                    checked = false;
                }
            }
            else{
                if (day>28){
                    checked = false;
                }
            }
        }
        return checked;
    }
    
    public boolean contains(final int[] array, final int v) {
        for (final int e : array)
            if (e == v)
                return true;
        return false;
    }
    
    public String checkDescription(String description){
        String temp = description.replace("\n", " ");
        return temp;
    }
    
    public String generateTimetableID(String oldID){
        String[] splited = oldID.split("-");
        String splitDigit = splited[1];
        int digit = Integer.parseInt(splitDigit);
        String newID = String.format("%0"+6+"d", digit+1);
        return ("TIM-"+newID);
    }
    
    public String generateResultID(String oldID){
        String[] splited = oldID.split("-");
        String splitDigit = splited[1];
        int digit = Integer.parseInt(splitDigit);
        String newID = String.format("%0"+6+"d", digit+1);
        return ("EXM-"+newID);
    }
    
    public void getFromDatabase(){
        slipList.clear();
        String id;
        String date;
        String time;
        int seat;
        String triID;
        
        String sid;
        
        Connection con;
        
        try{
            Class.forName("com.ibm.db2.jcc.DB2Driver");
            con = DriverManager.getConnection(url);
            
            Statement sql1;
            ResultSet rs1;
            String s1 = "select subject_id from subject";
            sql1 = con.createStatement();
            rs1 = sql1.executeQuery(s1);
            while(rs1.next()){
                SubjectComboBox.addItem(rs1.getString(1));
            }
            rs1.close();
            sql1.close();
            
            Statement sql2;
            ResultSet rs2;
            String s2 = "select student_id from student";
            sql2 = con.createStatement();
            rs2 = sql2.executeQuery(s2);
            while (rs2.next()){
                sid = rs2.getString(1);
                studentIDList.add(sid);
            }
            rs2.close();
            sql2.close();
            
            Statement sql3;
            ResultSet rs3;
            String s3 = "select * from timetable";
            sql3 = con.createStatement();
            rs3 = sql3.executeQuery(s3);
            while (rs3.next()){
                id = rs3.getString("timetable_id");
                date = rs3.getString("timetable_date");
                time = rs3.getString("timetable_time");
                seat = Integer.parseInt(rs3.getString("timetable_seat"));
                triID = rs3.getString("trimester_id");
                slipList.add(new ExamSlip(id, date, time, seat, triID));
            }
            rs3.close();
            sql3.close();
            
            
            
            con.close();
        }
        catch (ClassNotFoundException | SQLException e) {
            System.out.println(e);
        }              
    }
    
    public void refreshExamResult(){
        resultList.clear();
        String ID;
        String grade;
        double cgpa;
        double gpa;
        int totalCreditHour;
        String subID;
        String stuID;
        String triID;
        
        Connection con;
        
        try{
            Class.forName("com.ibm.db2.jcc.DB2Driver");
            con = DriverManager.getConnection(url);
            
            Statement sql1;
            ResultSet rs1;
            String s1 = "select * from trimester";
            sql1 = con.createStatement();
            rs1 = sql1.executeQuery(s1);
            while(rs1.next()){
                TrimesterComboBox.addItem(rs1.getString(1));
                resultTri.add(rs1.getString(1));
            }
            rs1.close();
            sql1.close();
            
            Statement sql2;
            ResultSet rs2;
            String s2 = "select * from exam_result";
            sql2 = con.createStatement();
            rs2 = sql2.executeQuery(s2);
            while (rs2.next()){
                ID = rs2.getString("exam_result_id");
                grade = rs2.getString("grade");
                cgpa = Double.parseDouble(rs2.getString("cgpa"));
                gpa = Double.parseDouble(rs2.getString("gpa"));
                totalCreditHour = Integer.parseInt(rs2.getString("total_credit_hour"));
                triID = rs2.getString("trimester_id");
                resultList.add(new ExamResult(ID, grade, cgpa, gpa, totalCreditHour, triID));
            }
            rs2.close();
            sql2.close();
            con.close();
        }
        catch (ClassNotFoundException | SQLException e) {
            System.out.println(e);
        }              
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AdminExamination.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AdminExamination.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AdminExamination.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AdminExamination.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AdminExamination().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel CGERLabel;
    private javax.swing.JLabel CGESLabel;
    private javax.swing.JTextField CHText;
    private javax.swing.JPanel ContentGER;
    private javax.swing.JPanel ContentGES;
    private javax.swing.JPanel ContentMainPanel;
    private javax.swing.JPanel ContentPanel;
    private javax.swing.JLabel CreditHourLabel;
    private javax.swing.JLabel ELabel;
    private javax.swing.JLabel ELabel2;
    private javax.swing.JPanel EPanel;
    private javax.swing.JButton ERSave;
    private javax.swing.JTextField ExamDate;
    private javax.swing.JLabel ExamDateLabel;
    private javax.swing.JLabel ExamTimeLabel;
    private javax.swing.JLabel GERLabel;
    private javax.swing.JLabel GERLabel2;
    private javax.swing.JPanel GERPanel;
    private javax.swing.JLabel GESLabel;
    private javax.swing.JLabel GESLabel2;
    private javax.swing.JPanel GESPanel;
    private javax.swing.JComboBox<String> GPAComboBox;
    private javax.swing.JLabel GPALabel;
    private javax.swing.JLabel GenerateNotificationIconLabel;
    private javax.swing.JComboBox<String> GradeComboBox;
    private javax.swing.JLabel GradeLabel;
    private javax.swing.JLabel HomeIconLabel;
    private javax.swing.JLabel HomeLabel;
    private javax.swing.JPanel MenuPanel;
    private javax.swing.JLabel NotificationIconLabel;
    private javax.swing.JButton SaveButton;
    private javax.swing.JLabel SelectTri;
    private javax.swing.JLabel StudentIDLabel;
    private javax.swing.JTextField StudentIDText;
    private javax.swing.JTextField StudentNameText;
    private javax.swing.JComboBox<String> SubjectComboBox;
    private javax.swing.JLabel SubjectIDLabel;
    private javax.swing.JTextField SubjectIDText;
    private javax.swing.JLabel SubjectLabel;
    private javax.swing.JTextField SubjectNameText;
    private javax.swing.JComboBox<String> TimeComboBox;
    private javax.swing.JComboBox<String> TrimesterComboBox;
    private javax.swing.JLabel ViewNotificationIconLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JSeparator jSeparator1;
    // End of variables declaration//GEN-END:variables

    public boolean checkTri(String triID) {
        LinkedList<String> temp = new LinkedList<>();
        for (int i=0;i<resultList.size();i++){
            temp.add(resultList.get(i).getTriID());
        }
        return !temp.contains(triID);
    }
    
    public boolean checkTriID(LinkedList<String> triID){
        boolean check = true;
        for (int i=0;i<slipList.size();i++){
            for (int j=0;j<triID.size();j++){
                if (triID.get(j).equals(slipList.get(i).getTriID())){
                    check = false;
                    break;
                }
            }
        }
        return check;
    }
}
