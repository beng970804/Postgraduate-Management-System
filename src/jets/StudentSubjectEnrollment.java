/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package jets;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.LinkedList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author FOOCK
 */
public class StudentSubjectEnrollment extends javax.swing.JFrame {
    
    String Course;
    String Name;
    int clicked = 0;
    int enrolledsubject = 0;
    int trimester = 0;
    String ToRemove = null;
    LinkedList<String> AddSubjectID = new LinkedList<>();
    LinkedList<String> AddSubjectName = new LinkedList<>();
    LinkedList<String> DropSubjectID = new LinkedList<>();
    LinkedList<String> DropSubjectName = new LinkedList<>();
    LinkedList<String> Enrolled = new LinkedList<>();
    LinkedList<String> EnrolledName = new LinkedList<>();
    String url = "jdbc:db2:PMS"; //database name
    Connection con;
    /**
     * Creates new form StudentSubjectEnrollment
     */
    public StudentSubjectEnrollment() {
        initComponents();
         try {
		Class.forName("com.ibm.db2.jcc.DB2Driver");
		con = DriverManager.getConnection(url);
		Statement sql1;
		ResultSet rs;
		String s1 = "SELECT COURSE_ID, STUDENT_NAME FROM STUDENT WHERE STUDENT_ID = '"+Jets.UserID+"'";
                sql1 = con.createStatement();
                rs = sql1.executeQuery(s1);
		while (rs.next ()) {
                    Course = rs.getString(1);
                    Name = rs.getString(2);
		}
                rs.close();
		sql1.close();
		con.close();
        } //end try	
        catch (ClassNotFoundException | SQLException e) {
            System.out.println(e);
        }
        //System.out.println(Course);
        //System.out.println(Name);
        
        try {
		Class.forName("com.ibm.db2.jcc.DB2Driver");
		con = DriverManager.getConnection(url);
		Statement sql1;
		ResultSet rs;
		String s1 = "SELECT RECORD FROM COUNTER WHERE COUNTER_ID = 'TRIMESTER'";
                sql1 = con.createStatement();
                rs = sql1.executeQuery(s1);
		while (rs.next ()) {
                    trimester = rs.getInt(1);
		}
                rs.close();
		sql1.close();
		con.close();
        } //end try	
        catch (ClassNotFoundException | SQLException e) {
            System.out.println(e);
        }
        //System.out.println(trimester);
        
        try {
		Class.forName("com.ibm.db2.jcc.DB2Driver");
		con = DriverManager.getConnection(url);
		Statement sql1;
		ResultSet rs;
                String s1 = "SELECT SUBJECT_ID FROM TRIMESTER WHERE STUDENT_ID = '"+Jets.UserID+"'";
                sql1 = con.createStatement();
                rs = sql1.executeQuery(s1);
		while (rs.next ()) {
                    Enrolled.add(rs.getString(1));
                    enrolledsubject = enrolledsubject + 1;
		}
                rs.close();
		sql1.close();
		con.close();
            } //end try	
            catch (ClassNotFoundException | SQLException e) {
                System.out.println(e);
            }
        for(int i=0; i<Enrolled.size();i++)
        {
            System.out.println("Enrolled: " + Enrolled.get(i));
        }
        for(int i=0; i<Enrolled.size(); i++)
            {
               try {
                    Class.forName("com.ibm.db2.jcc.DB2Driver");
                    con = DriverManager.getConnection(url);
                    Statement sql1;
                    ResultSet rs;
                    String s1 = "SELECT SUBJECT_NAME FROM SUBJECT WHERE SUBJECT_ID = '"+Enrolled.get(i)+"'";
                    sql1 = con.createStatement();
                    rs = sql1.executeQuery(s1);
                    while (rs.next ()) {
                        EnrolledName.add(rs.getString(1));
                    }
                    rs.close();
                    sql1.close();
                    con.close();
                } //end try	
                catch (ClassNotFoundException | SQLException e) {
                    System.out.println(e);
                }         
            }  
    }
        

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel14 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        AddSubject = new javax.swing.JButton();
        DropSubject = new javax.swing.JButton();
        jLayeredPane1 = new javax.swing.JLayeredPane();
        AddSubj = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        AddSubjectTable = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        subj1 = new javax.swing.JTextField();
        subj2 = new javax.swing.JTextField();
        subj3 = new javax.swing.JTextField();
        subj4 = new javax.swing.JTextField();
        addconfirm = new javax.swing.JButton();
        addreset = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        EnrolledTable = new javax.swing.JTable();
        jLabel8 = new javax.swing.JLabel();
        DropSubj = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        DropSubjectTable = new javax.swing.JTable();
        jLabel6 = new javax.swing.JLabel();
        delete = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Student- Enrollment");
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(60, 100, 255));
        jPanel1.setPreferredSize(new java.awt.Dimension(340, 720));

        jLabel14.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel14.setForeground(new java.awt.Color(255, 255, 255));
        jLabel14.setText("Subject Management");

        jLabel17.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/icons8-Back To-64.png"))); // NOI18N
        jLabel17.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jLabel17MousePressed(evt);
            }
        });

        AddSubject.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        AddSubject.setForeground(new java.awt.Color(255, 255, 255));
        AddSubject.setText("Add Subject");
        AddSubject.setAlignmentY(0.0F);
        AddSubject.setContentAreaFilled(false);
        AddSubject.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddSubjectActionPerformed(evt);
            }
        });

        DropSubject.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        DropSubject.setForeground(new java.awt.Color(255, 255, 255));
        DropSubject.setText("Drop Subject");
        DropSubject.setToolTipText("");
        DropSubject.setAlignmentY(0.0F);
        DropSubject.setContentAreaFilled(false);
        DropSubject.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DropSubjectActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(AddSubject, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(DropSubject, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(11, 11, 11)
                        .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel14)
                        .addGap(0, 13, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel14))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(AddSubject, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(DropSubject, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(553, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        jLayeredPane1.setLayout(new java.awt.CardLayout());

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 48)); // NOI18N
        jLabel1.setText("Add Subject");

        AddSubjectTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        AddSubjectTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                AddSubjectTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(AddSubjectTable);

        jLabel3.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jLabel3.setText("Subject 1:");

        jLabel4.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jLabel4.setText("Subject 2:");

        jLabel5.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jLabel5.setText("Subject 3:");

        jLabel7.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jLabel7.setText("Subject 4:");

        subj1.setEditable(false);
        subj1.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        subj1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                subj1ActionPerformed(evt);
            }
        });

        subj2.setEditable(false);
        subj2.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        subj2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                subj2ActionPerformed(evt);
            }
        });

        subj3.setEditable(false);
        subj3.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        subj3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                subj3ActionPerformed(evt);
            }
        });

        subj4.setEditable(false);
        subj4.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        subj4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                subj4ActionPerformed(evt);
            }
        });

        addconfirm.setText("Confirm");
        addconfirm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addconfirmActionPerformed(evt);
            }
        });

        addreset.setText("Reset");
        addreset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addresetActionPerformed(evt);
            }
        });

        EnrolledTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        EnrolledTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                EnrolledTableMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(EnrolledTable);

        jLabel8.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jLabel8.setText("Enrolled Subject:");

        javax.swing.GroupLayout AddSubjLayout = new javax.swing.GroupLayout(AddSubj);
        AddSubj.setLayout(AddSubjLayout);
        AddSubjLayout.setHorizontalGroup(
            AddSubjLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(AddSubjLayout.createSequentialGroup()
                .addGroup(AddSubjLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(AddSubjLayout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addComponent(jLabel1))
                    .addGroup(AddSubjLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 918, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(AddSubjLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(AddSubjLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(AddSubjLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(AddSubjLayout.createSequentialGroup()
                                    .addComponent(addreset, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(addconfirm, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(AddSubjLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(AddSubjLayout.createSequentialGroup()
                                        .addComponent(jLabel7)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(subj4, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(AddSubjLayout.createSequentialGroup()
                                        .addComponent(jLabel5)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(subj3, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(AddSubjLayout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(subj2, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(AddSubjLayout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(subj1, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(AddSubjLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel8)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 445, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(12, Short.MAX_VALUE))
        );
        AddSubjLayout.setVerticalGroup(
            AddSubjLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(AddSubjLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(AddSubjLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(subj1, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(AddSubjLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(AddSubjLayout.createSequentialGroup()
                        .addGroup(AddSubjLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(subj2, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(AddSubjLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(subj3, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(AddSubjLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(subj4, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(AddSubjLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(addreset, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(addconfirm, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 89, Short.MAX_VALUE))
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap())
        );

        jLayeredPane1.add(AddSubj, "card5");

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 48)); // NOI18N
        jLabel2.setText("Drop Subject");

        DropSubjectTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        DropSubjectTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                DropSubjectTableMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(DropSubjectTable);

        jLabel6.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jLabel6.setText("Select a subject and click \"Drop\" to drop subject");

        delete.setText("Drop");
        delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout DropSubjLayout = new javax.swing.GroupLayout(DropSubj);
        DropSubj.setLayout(DropSubjLayout);
        DropSubjLayout.setHorizontalGroup(
            DropSubjLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(DropSubjLayout.createSequentialGroup()
                .addGroup(DropSubjLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(DropSubjLayout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addComponent(jLabel2)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(DropSubjLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(DropSubjLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2)
                            .addGroup(DropSubjLayout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 304, Short.MAX_VALUE)
                                .addComponent(delete, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap())
        );
        DropSubjLayout.setVerticalGroup(
            DropSubjLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(DropSubjLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(DropSubjLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(delete, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(243, Short.MAX_VALUE))
        );

        jLayeredPane1.add(DropSubj, "card3");

        getContentPane().add(jLayeredPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 0, 940, 720));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void AddSubjectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddSubjectActionPerformed
        AddSubj.setVisible(true);
        DropSubj.setVisible(false);
        if(Enrolled.size() <= 0)
        {
            try {
		Class.forName("com.ibm.db2.jcc.DB2Driver");
		con = DriverManager.getConnection(url);
		Statement sql1;
		ResultSet rs;
                String s1 = "SELECT SUBJECT_ID FROM TRIMESTER WHERE STUDENT_ID = '"+Jets.UserID+"'";
                sql1 = con.createStatement();
                rs = sql1.executeQuery(s1);
		while (rs.next ()) {
                    Enrolled.add(rs.getString(1));
		}
                rs.close();
		sql1.close();
		con.close();
            } //end try	
            catch (ClassNotFoundException | SQLException e) {
                System.out.println(e);
            }
        for(int i=0; i<Enrolled.size();i++)
        {
            System.out.println("Enrolled: " + Enrolled.get(i));
        }
        for(int i=0; i<Enrolled.size(); i++)
            {
               try {
                    Class.forName("com.ibm.db2.jcc.DB2Driver");
                    con = DriverManager.getConnection(url);
                    Statement sql1;
                    ResultSet rs;
                    String s1 = "SELECT SUBJECT_NAME FROM SUBJECT WHERE SUBJECT_ID = '"+Enrolled.get(i)+"'";
                    sql1 = con.createStatement();
                    rs = sql1.executeQuery(s1);
                    while (rs.next ()) {
                        EnrolledName.add(rs.getString(1));
                    }
                    rs.close();
                    sql1.close();
                    con.close();
                } //end try	
                catch (ClassNotFoundException | SQLException e) {
                    System.out.println(e);
                }         
            }
        }
        if(AddSubjectID.size() <= 0)
        {
            try {
		Class.forName("com.ibm.db2.jcc.DB2Driver");
		con = DriverManager.getConnection(url);
		Statement sql1;
		ResultSet rs;
                String s1 = "SELECT SUBJECT_ID, SUBJECT_NAME FROM SUBJECT WHERE COURSE_ID = '"+Course+"'";
                sql1 = con.createStatement();
                rs = sql1.executeQuery(s1);
		while (rs.next ()) {
                    AddSubjectID.add(rs.getString(1));
                    AddSubjectName.add(rs.getString(2));
		}
                rs.close();
		sql1.close();
		con.close();
            } //end try	
            catch (ClassNotFoundException | SQLException e) {
                System.out.println(e);
            }
        }
        if (!AddSubjectID.isEmpty()){
            DefaultTableModel AddSubjectModel = new DefaultTableModel();
            Object[][] Coursedata =
            {
                {AddSubjectID.get(0), AddSubjectName.get(0)}
            };
            String[] CoursecolName = {"Subject ID", "Subject Name"};
            AddSubjectModel.setDataVector(Coursedata, CoursecolName);
            for(int i=1; i<AddSubjectID.size(); i++)
            {
                AddSubjectModel.addRow(new Object[]{AddSubjectID.get(i), AddSubjectName.get(i)});
            }
            AddSubjectTable.setModel(AddSubjectModel);
        }
        else
        {
            DefaultTableModel AddSubjectModel = new DefaultTableModel();
            Object[][] Coursedata =
            {
                {}
            };
            String[] CoursecolName = {"Subject ID", "Subject Name"};
            AddSubjectModel.setDataVector(Coursedata, CoursecolName);
            AddSubjectModel.removeRow(0);
            AddSubjectTable.setModel(AddSubjectModel);
        }
        
        
        if(Enrolled.size()>0)
        {
            DefaultTableModel NewEnrolledModel = new DefaultTableModel();
            Object[][] Enrolldata =
            {
                {Enrolled.get(0), EnrolledName.get(0)}
            };
            String[] EnrollName = {"Subject ID", "Subject Name"};
            NewEnrolledModel.setDataVector(Enrolldata, EnrollName);
            if(Enrolled.size()>1)
            {
                for(int i=1; i<Enrolled.size(); i++)
                {
                    NewEnrolledModel.addRow(new Object[]{Enrolled.get(i), EnrolledName.get(i)});
                }
            }
            EnrolledTable.setModel(NewEnrolledModel);
        }
        
        
        
    }//GEN-LAST:event_AddSubjectActionPerformed

    private void DropSubjectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DropSubjectActionPerformed
        AddSubj.setVisible(false);
        DropSubj.setVisible(true);
        if(DropSubjectID.size()<=0)
        {
            try {
		Class.forName("com.ibm.db2.jcc.DB2Driver");
		con = DriverManager.getConnection(url);
		Statement sql1;
		ResultSet rs;
                String s1 = "SELECT SUBJECT_ID FROM TRIMESTER WHERE STUDENT_ID = '"+Jets.UserID+"'";
                sql1 = con.createStatement();
                rs = sql1.executeQuery(s1);
		while (rs.next ()) {
                    DropSubjectID.add(rs.getString(1));
		}
                rs.close();
		sql1.close();
		con.close();
            } //end try	
            catch (ClassNotFoundException | SQLException e) {
                System.out.println(e);
            }

            for(int i=0; i<DropSubjectID.size(); i++)
            {
               try {
                    Class.forName("com.ibm.db2.jcc.DB2Driver");
                    con = DriverManager.getConnection(url);
                    Statement sql1;
                    ResultSet rs;
                    String s1 = "SELECT SUBJECT_NAME FROM SUBJECT WHERE SUBJECT_ID = '"+DropSubjectID.get(i)+"'";
                    sql1 = con.createStatement();
                    rs = sql1.executeQuery(s1);
                    while (rs.next ()) {
                        DropSubjectName.add(rs.getString(1));
                    }
                    rs.close();
                    sql1.close();
                    con.close();
                } //end try	
                catch (ClassNotFoundException | SQLException e) {
                    System.out.println(e);
                }         
            }
        }
        
        if(DropSubjectID.size()>0)
        {
            DefaultTableModel DropSubjectModel = new DefaultTableModel();
            Object[][] DropCoursedata =
            {
                {DropSubjectID.get(0), DropSubjectName.get(0)}
            };
            String[] enrolledName = {"Subject ID", "Subject Name"};
            DropSubjectModel.setDataVector(DropCoursedata, enrolledName);
            for(int i=1; i<DropSubjectID.size(); i++)
            {
                DropSubjectModel.addRow(new Object[]{DropSubjectID.get(i), DropSubjectName.get(i)});
            }
            DropSubjectTable.setModel(DropSubjectModel);
        }
        
        

        
    }//GEN-LAST:event_DropSubjectActionPerformed

    private void AddSubjectTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_AddSubjectTableMouseClicked
        int x = AddSubjectTable.getSelectedRow();
        clicked++;
        if(enrolledsubject == 0)
        {
            if(clicked == 1)
            {
                subj1.setText(AddSubjectID.get(x));
            }
            if(clicked == 2)
            {
                subj2.setText(AddSubjectID.get(x));
            }
            if(clicked == 3)
            {
                subj3.setText(AddSubjectID.get(x));
            }
            if(clicked == 4)
            {
                subj4.setText(AddSubjectID.get(x));
                clicked = 0;
            }
            
        }
        if(enrolledsubject == 1)
        {
            if(clicked == 1)
            {
                subj1.setText(AddSubjectID.get(x));
            }
            if(clicked == 2)
            {
                subj2.setText(AddSubjectID.get(x));
            }
            if(clicked == 3)
            {
                subj3.setText(AddSubjectID.get(x));
                clicked = 0;
            }
            
        }
        if(enrolledsubject == 2)
        {
            if(clicked == 1)
            {
                subj1.setText(AddSubjectID.get(x));
            }
            if(clicked == 2)
            {
                subj2.setText(AddSubjectID.get(x));
                clicked = 0;
            }
            
        }
        if(enrolledsubject == 3)
        {
            if(clicked == 1)
            {
                subj1.setText(AddSubjectID.get(x));
                clicked = 0;
            }
            
        }
        if(enrolledsubject == 4)
        {
            JOptionPane.showMessageDialog(null,"Maximum subject enrollment is 4 subjects");
        }

    }//GEN-LAST:event_AddSubjectTableMouseClicked

    private void DropSubjectTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_DropSubjectTableMouseClicked
        int x = DropSubjectTable.getSelectedRow();
        ToRemove = DropSubjectID.get(x);
        //int choice=JOptionPane.showConfirmDialog(null, "Are you sure you want to remove "+remove);
        // 0=yes, 1=no, 2=cancels
        //System.out.println(choice);

    }//GEN-LAST:event_DropSubjectTableMouseClicked

    private void subj1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_subj1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_subj1ActionPerformed

    private void subj2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_subj2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_subj2ActionPerformed

    private void subj3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_subj3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_subj3ActionPerformed

    private void subj4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_subj4ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_subj4ActionPerformed

    private void addconfirmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addconfirmActionPerformed
        LinkedList<String> subjectlist = new LinkedList<>();
        if(!subj1.getText().equals(""))
        {
            subjectlist.add(subj1.getText());
        }
        Boolean check = false;
        if((subj2.getText().equals(subj1.getText()) || subj2.getText().equals(subj3.getText()) || subj2.getText().equals(subj4.getText())) && !subj2.getText().equals(""))
        {
            JOptionPane.showMessageDialog(null,"Duplicate of subject is not allow");
            check = false;
            clicked = 0;
        }
        else if((subj3.getText().equals(subj1.getText()) || subj3.getText().equals(subj2.getText()) || subj2.getText().equals(subj4.getText())) && !subj3.getText().equals(""))
        {
            JOptionPane.showMessageDialog(null,"Duplicate of subject is not allow");
            check = false;
            clicked = 0;
        }
        else if((subj4.getText().equals(subj1.getText()) || subj4.getText().equals(subj2.getText()) || subj4.getText().equals(subj3.getText())) && !subj4.getText().equals(""))
        {
            JOptionPane.showMessageDialog(null,"Duplicate of subject is not allow");
            check = false;
            clicked = 0;
        }
        else
        {
            check = true;
        }
        
        if(Enrolled.size() > 1)
        {
             for(int i=0; i<Enrolled.size();i++)
            {
                if(subj1.getText().equals(Enrolled.get(i)) || subj2.getText().equals(Enrolled.get(i)) || subj3.getText().equals(Enrolled.get(i)) || subj4.equals(Enrolled.get(i)))
                {
                    check = false;
                    JOptionPane.showMessageDialog(null,"You already enrolled in this subject: " + Enrolled.get(i));
                    break;
                }
            }
        }
       
        
        if(!check)
        {
            clicked = 0;
            subj1.setText("");
            subj2.setText("");
            subj3.setText("");
            subj4.setText("");
        }
        else
        {
            if(!subj2.getText().equals(""))
            {
                subjectlist.add(subj2.getText());
            }
            if(!subj3.getText().equals(""))
            {
                subjectlist.add(subj3.getText());
            }
            if(!subj4.getText().equals(""))
            {
                subjectlist.add(subj4.getText());
            }
        }
        
        if(subjectlist.size()>0 && check)
        {
            for(int i=0; i<subjectlist.size(); i++)
            {
                enrolledsubject = enrolledsubject + 1;
                trimester = trimester + 1;
                String triID = null;
                if(trimester < 10)
                {
                    triID = "00000" + String.valueOf(trimester);
                }
                if(trimester >= 10)
                {
                    triID = "0000" + String.valueOf(trimester);
                }
                if(trimester >= 100)
                {
                    triID = "000" + String.valueOf(trimester);
                }
                if(trimester >= 1000)
                {
                    triID = "00" + String.valueOf(trimester);
                }
                if(trimester >= 10000)
                {
                    triID = "0" + String.valueOf(trimester);
                }
                if(trimester >= 100000)
                {
                    triID = String.valueOf(trimester);
                }
                
                try {
                    con = DriverManager.getConnection(url);
                    PreparedStatement pstmt;
                    pstmt = con.prepareStatement("INSERT INTO TRIMESTER VALUES ('TRI-"+triID+"','"+Jets.UserID+"', '"+(subjectlist.get(i))+"')");
                    pstmt.execute();
                    pstmt.close();
                    con.close();
                } //end try
                    catch (SQLException e) {
                    System.out.println(e);
                }     
            }
            try {
                    con = DriverManager.getConnection(url);
                    PreparedStatement pstmt;
                    pstmt = con.prepareStatement("UPDATE COUNTER SET RECORD= '"+trimester+"' WHERE COUNTER_ID = 'TRIMESTER'");
                    pstmt.execute();
                    pstmt.close();
                    con.close();
            } //end try
                catch (SQLException e) {
                System.out.println(e);
            }     
            JOptionPane.showMessageDialog(null,"Subject successfully added");
            DropSubjectID.clear();
            DropSubjectName.clear();
            Enrolled.clear();
            EnrolledName.clear();
        }
        
    }//GEN-LAST:event_addconfirmActionPerformed

    private void addresetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addresetActionPerformed
        clicked = 0;
        subj1.setText("");
        subj2.setText("");
        subj3.setText("");
        subj4.setText("");
    }//GEN-LAST:event_addresetActionPerformed

    private void deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteActionPerformed
        String TriToRemove = null;
        if(ToRemove == null)
        {
            JOptionPane.showMessageDialog(null,"Please select a subject");
        }
        else
        {
            int choice = JOptionPane.showConfirmDialog(null, "Are you sure you want to remove "+ToRemove);
            //System.out.println(ToRemove);
            
            if(choice == 0)
            {
                try {
                    Class.forName("com.ibm.db2.jcc.DB2Driver");
                    con = DriverManager.getConnection(url);
                    Statement sql1;
                    ResultSet rs;
                    String s1 = "SELECT TRIMESTER_ID FROM TRIMESTER WHERE STUDENT_ID = '"+Jets.UserID+"' AND SUBJECT_ID = '"+ToRemove+"'";
                    sql1 = con.createStatement();
                    rs = sql1.executeQuery(s1);
                    while (rs.next ()) {
                        TriToRemove = rs.getString(1);
                    }
                    rs.close();
                    sql1.close();
                    con.close();
                } //end try	
                catch (ClassNotFoundException | SQLException e) {
                    System.out.println(e);
                }
                //System.out.println(TriToRemove);
                
                if(enrolledsubject > 1)
                {
                    try {
                        con = DriverManager.getConnection(url);
                        PreparedStatement pstmt;
                        pstmt = con.prepareStatement("DELETE FROM TIMETABLE WHERE TRIMESTER_ID = '"+TriToRemove+"'");
                        pstmt.execute();
                        pstmt.close();
                        con.close();
                    } //end try
                    catch (SQLException e) {
                        System.out.println(e);
                    }
                    try {
                        con = DriverManager.getConnection(url);
                        PreparedStatement pstmt;
                        pstmt = con.prepareStatement("DELETE FROM EXAM_RESULT WHERE TRIMESTER_ID = '"+TriToRemove+"'");
                        pstmt.execute();
                        pstmt.close();
                        con.close();
                    } //end try
                    catch (SQLException e) {
                        System.out.println(e);
                    }
                    try {
                        con = DriverManager.getConnection(url);
                        PreparedStatement pstmt;
                        pstmt = con.prepareStatement("DELETE FROM TRIMESTER WHERE STUDENT_ID = '"+Jets.UserID+"' AND SUBJECT_ID = '"+ToRemove+"'");
                        pstmt.execute();
                        pstmt.close();
                        con.close();
                    } //end try
                    catch (SQLException e) {
                        System.out.println(e);
                    }
                    for(int i=0; i<DropSubjectID.size(); i++)
                    {
                        if(DropSubjectID.get(i).equals(ToRemove))
                        {
                            DropSubjectID.remove(i);
                            DropSubjectName.remove(i);
                        }
                    }
                    enrolledsubject = enrolledsubject - 1;
                    
                    DefaultTableModel DropSubjectModel = new DefaultTableModel();
                    Object[][] DropCoursedata =
                    {
                        {DropSubjectID.get(0), DropSubjectName.get(0)}
                    };
                    String[] enrolledName = {"Subject ID", "Subject Name"};
                    DropSubjectModel.setDataVector(DropCoursedata, enrolledName);
                    for(int i=1; i<DropSubjectID.size(); i++)
                    {
                        DropSubjectModel.addRow(new Object[]{DropSubjectID.get(i), DropSubjectName.get(i)});
                    }
                    DropSubjectTable.setModel(DropSubjectModel);
                    
                    JOptionPane.showMessageDialog(null,"Subject successfully removed");
                    ToRemove = null;
                    Enrolled.clear();
                    EnrolledName.clear();
                }
                else
                {
                    JOptionPane.showMessageDialog(null,"You must at least enroll 1 subject");
                    ToRemove = null;
                }
            }
            
            
        }
    }//GEN-LAST:event_deleteActionPerformed

    private void EnrolledTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_EnrolledTableMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_EnrolledTableMouseClicked

    private void jLabel17MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel17MousePressed
        // TODO add your handling code here:
        if (Jets.UserType.equals("STUDENT"))
            new StudentMainMenu().setVisible(true);
        if (Jets.UserType.equals("ADMIN"))
            new AdminMainMenu().setVisible(true);
        if (Jets.UserType.equals("LECTURER"))
            new LecturerMainMenu().setVisible(true);
        dispose();
    }//GEN-LAST:event_jLabel17MousePressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(StudentSubjectEnrollment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(StudentSubjectEnrollment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(StudentSubjectEnrollment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(StudentSubjectEnrollment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new StudentSubjectEnrollment().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel AddSubj;
    private javax.swing.JButton AddSubject;
    private javax.swing.JTable AddSubjectTable;
    private javax.swing.JPanel DropSubj;
    private javax.swing.JButton DropSubject;
    private javax.swing.JTable DropSubjectTable;
    private javax.swing.JTable EnrolledTable;
    private javax.swing.JButton addconfirm;
    private javax.swing.JButton addreset;
    private javax.swing.JButton delete;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLayeredPane jLayeredPane1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextField subj1;
    private javax.swing.JTextField subj2;
    private javax.swing.JTextField subj3;
    private javax.swing.JTextField subj4;
    // End of variables declaration//GEN-END:variables
}
